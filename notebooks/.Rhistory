legendaries <- sapply(legendaries,tolower)
pokemons_df$is_legendary <- pokemons_df$species %in% legendaries
write.csv(pokemons_df,"../data/processed/pokemons.csv")
pokemons_df <- read.csv("../data/processed/pokemons.csv")
pokemons_df
head(pokemons_df)
ggplot(pokemons_df, aes(x=type_primary, y=height)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
geom_boxplot(width=0.1)+
theme_classic()
library(ggplot2)
ggplot(pokemons_df, aes(x=type_primary, y=height)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
geom_boxplot(width=0.1)+
theme_classic()
ggplot(pokemons_df, aes(x=type_primary, y=height)) +
geom_violin(trim=FALSE, fill="gray")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
geom_boxplot(width=0.1)+
theme_classic() +
scale_fill_brewer(palette="Blues") + theme_classic()
ggplot(pokemons_df, aes(x=type_primary, y=height)) +
geom_violin(trim=FALSE)+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
geom_boxplot(width=0.1)+
theme_classic() +
scale_fill_brewer(palette="Blues") + theme_classic()
dp <- ggplot(ToothGrowth, aes(x=type, y=height, fill=type)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
dp + theme_classic()
dp <- ggplot(ToothGrowth, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
dp + theme_classic()
dp <- ggplot(ToothGrowth, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
dp <- ggplot(ToothGrowth, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(ToothGrowth, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(ToothGrowth, aes(x=type_primary, y=height)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(pokemons_df, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
theme_classic()
ggplot(pokemons_df, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length") +
scale_fill_brewer(palette="Blues") +
theme_classic()
ggplot(pokemons_df, aes(x=type_primary, y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length") +
scale_fill_brewer(palette="Dark2") +
theme_classic()
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length") +
scale_fill_brewer(palette="Dark2") +
theme_classic()
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_brewer(palette="Tab20") +
theme_classic()
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_brewer(palette="Tab20") +
theme_classic()
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_brewer(palette="tab20") +
theme_classic()
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_brewer(palette="Set3") +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
library(ggplot2)
library(RColorBrewer)
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_brewer(palette="Set3") +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE,fill=getPalette(colourCount))+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_brewer(palette=getPalette(colourCount)) +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE,fill=getPalette(colourCount))+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
# scale_fill_brewer(palette=getPalette(colourCount)) +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE,color=getPalette(colourCount))+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
# scale_fill_brewer(palette=getPalette(colourCount)) +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
# scale_fill_brewer(palette=getPalette(colourCount)) +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
# scale_fill_brewer(palette=getPalette(colourCount)) +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic()
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Heights by primary species",x="Primary species", y = "Height (dm)") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_by_primary <- function(var,label){
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, var, FUN = median), y=var, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title=label,x="Primary species", y = "Height (dm)") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
plot_by_primary(height, "Height (dm")
plot_by_primary("height", "Height (dm")
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title=label,x="Primary species", y = "Height (dm)") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, height, FUN = median), y=height, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Height (dm)",x="Primary species", y = "Height (dm)") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, base_experience, FUN = median), y=base_experience, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Base experience",x="Primary species", y = "Height (dm)") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, weight, FUN = median), y=weight, fill=type_primary)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Weight by primary type",x="Primary species", y = "Weight") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pokemons_df, aes(x=reorder(type_primary, weight, FUN = median), y=weight, fill=type_primary)) +
geom_violin(trim=FALSE)+
scale_y_continuous(trans='log2')+
geom_boxplot(width=0.1, fill="white")+
labs(title="Weight by primary type",x="Primary species", y = "Weight") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
colourCount = length(unique(pokemons_df$type_primary))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
ggplot(pokemons_df, aes(x=reorder(type_primary, weight, FUN = median), y=weight, fill=type_primary)) +
geom_violin(trim=FALSE)+
scale_y_continuous(trans='log10')+
geom_boxplot(width=0.1, fill="white")+
labs(title="Weight by primary type",x="Primary species", y = "Weight") +
scale_fill_manual(values = getPalette(colourCount)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pokemons_df, aes(x = defense_base, y = attack_base)) + geom_point()
ggplot(pokemons_df, aes(x = defense_base, y = attack_base, color=is_legendary))+
geom_point() +
ggplot(pokemons_df, aes(x = defense_base, y = attack_base, color=is_legendary))+
geom_point()
ggplot(pokemons_df, aes(x = defense_base, y = attack_base, color=is_legendary))+
geom_point() +
theme_classic()
ggplot(pokemons_df, aes(x = defense_base, y = attack_base, color=primary_type))+
geom_point() +
theme_classic()
ggplot(pokemons_df, aes(x = defense_base, y = attack_base, color=type_primary))+
geom_point() +
theme_classic()
ggplot(pokemons_df, aes(x = defense_base, y = speed_base, color=is_legendary))+
geom_point() +
theme_classic()
ggplot(pokemons_df, aes(x = defense_base, y = special.defense_base, color=is_legendary))+
geom_point() +
theme_classic()
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(my_data$speed_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
par(mfrow=c(2,2))
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
par(mfrow=c(2,2))
qqnorm(pokemons_df$height, pch = 1, frame = FALSE)
qqline(pokemons_df$height, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$weight, pch = 1, frame = FALSE)
qqline(pokemons_df$weight, col = "steelblue", lwd = 2)
par(mfrow=c(2,2))
qqnorm(pokemons_df$height, pch = 1, frame = FALSE)
qqline(pokemons_df$height, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$weight, pch = 1, frame = FALSE)
qqline(pokemons_df$weight, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
par(mfrow=c(3,3))
qqnorm(pokemons_df$height, pch = 1, frame = FALSE)
qqline(pokemons_df$height, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$weight, pch = 1, frame = FALSE)
qqline(pokemons_df$weight, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$defense_base, pch = 1, frame = FALSE)
qqline(pokemons_df$defense_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$attack_base, pch = 1, frame = FALSE)
qqline(pokemons_df$attack_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$hp_base, pch = 1, frame = FALSE)
qqline(pokemons_df$hp_base, col = "steelblue", lwd = 2)
par(mfrow=c(2,3))
qqnorm(pokemons_df$height, pch = 1, frame = FALSE)
qqline(pokemons_df$height, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$weight, pch = 1, frame = FALSE)
qqline(pokemons_df$weight, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$defense_base, pch = 1, frame = FALSE)
qqline(pokemons_df$defense_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$attack_base, pch = 1, frame = FALSE)
qqline(pokemons_df$attack_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$hp_base, pch = 1, frame = FALSE)
qqline(pokemons_df$hp_base, col = "steelblue", lwd = 2)
par(mfrow=c(2,3))
qqnorm(pokemons_df$height, pch = 1, frame = FALSE,main="hello")
qqline(pokemons_df$height, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$weight, pch = 1, frame = FALSE)
qqline(pokemons_df$weight, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE)
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$defense_base, pch = 1, frame = FALSE)
qqline(pokemons_df$defense_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$attack_base, pch = 1, frame = FALSE)
qqline(pokemons_df$attack_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$hp_base, pch = 1, frame = FALSE)
qqline(pokemons_df$hp_base, col = "steelblue", lwd = 2)
par(mfrow=c(2,3))
qqnorm(pokemons_df$height, pch = 1, frame = FALSE,main="Height")
qqline(pokemons_df$height, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$weight, pch = 1, frame = FALSE,main="Weight")
qqline(pokemons_df$weight, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$speed_base, pch = 1, frame = FALSE,main="Speed")
qqline(pokemons_df$speed_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$defense_base, pch = 1, frame = FALSE,main="Defense")
qqline(pokemons_df$defense_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$attack_base, pch = 1, frame = FALSE,main="Attack")
qqline(pokemons_df$attack_base, col = "steelblue", lwd = 2)
qqnorm(pokemons_df$hp_base, pch = 1, frame = FALSE,main="HP")
qqline(pokemons_df$hp_base, col = "steelblue", lwd = 2)
library(PathwaySplice)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rpl22_oe <- read.table("../data/processed/rmats_merge/rpl22_oe.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22l1_oe <- read.table("../data/processed/rmats_merge/rpl22l1_oe.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22l1_kd1 <- read.table("../data/processed/rmats_merge/rpl22l1_kd1.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22l1_kd2 <- read.table("../data/processed/rmats_merge/rpl22l1_kd2.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22_a_ko1 <- read.table("../data/processed/rmats_merge/rpl22_a_ko1.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22_a_ko2 <- read.table("../data/processed/rmats_merge/rpl22_a_ko2.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22_b_ko1 <- read.table("../data/processed/rmats_merge/rpl22_b_ko1.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
rpl22_b_ko2 <- read.table("../data/processed/rmats_merge/rpl22_b_ko2.txt",sep="\t", header=TRUE, stringsAsFactors=FALSE)
make_gene_table <- function(splicing_table){
splicing_table$geneID = splicing_table$GeneID
splicing_table$pvalue = splicing_table$PValue
splicing_table$fdr = splicing_table$FDR
return(makeGeneTable(splicing_table, stat = "fdr"))
}
rpl22_oe_reduced <- make_gene_table(rpl22_oe)
rpl22l1_oe_reduced <- make_gene_table(rpl22l1_oe)
rpl22l1_kd1_reduced <- make_gene_table(rpl22l1_kd1)
rpl22l1_kd2_reduced <- make_gene_table(rpl22l1_kd2)
rpl22_a_ko1_reduced <- make_gene_table(rpl22_a_ko1)
rpl22_a_ko2_reduced <- make_gene_table(rpl22_a_ko2)
rpl22_b_ko1_reduced <- make_gene_table(rpl22_b_ko1)
rpl22_b_ko2_reduced <- make_gene_table(rpl22_b_ko2)
run_splice <- function(gene_table){
res <- runPathwaySplice(gene_table,
genome='hg19',
id='ensGene',
test.cats=c("GO:CC", "GO:BP", "GO:MF"),
go.size.limit=c(5,500),
method='Wallenius',
use.genes.without.cat = TRUE)
return(res)
}
rpl22_oe_res <- run_splice(rpl22_oe_reduced)
rpl22l1_oe_res <- run_splice(rpl22l1_oe_reduced)
rpl22l1_kd1_res <- run_splice(rpl22l1_kd1_reduced)
rpl22l1_kd2_res <- run_splice(rpl22l1_kd2_reduced)
rpl22_a_ko1_res <- run_splice(rpl22_a_ko1_reduced)
rpl22_a_ko2_res <- run_splice(rpl22_a_ko2_reduced)
rpl22_b_ko1_res <- run_splice(rpl22_b_ko1_reduced)
rpl22_b_ko2_res <- run_splice(rpl22_b_ko2_reduced)
View(rpl22_oe_res)
View(rpl22_oe_res)
run_splice <- function(gene_table){
res <- runPathwaySplice(gene_table,
genome='hg19',
id='ensGene',
test.cats=c("GO:CC", "GO:BP", "GO:MF"),
go.size.limit=c(10,500),
method='Wallenius',
use.genes.without.cat = TRUE)
return(res)
}
rpl22_oe_res <- run_splice(rpl22_oe_reduced)
rpl22l1_oe_res <- run_splice(rpl22l1_oe_reduced)
rpl22l1_kd1_res <- run_splice(rpl22l1_kd1_reduced)
rpl22l1_kd2_res <- run_splice(rpl22l1_kd2_reduced)
rpl22_a_ko1_res <- run_splice(rpl22_a_ko1_reduced)
rpl22_a_ko2_res <- run_splice(rpl22_a_ko2_reduced)
rpl22_b_ko1_res <- run_splice(rpl22_b_ko1_reduced)
rpl22_b_ko2_res <- run_splice(rpl22_b_ko2_reduced)
View(rpl22_oe_res)
View(rpl22_oe_res)
View(rpl22_oe_res)
View(rpl22_oe_res)
View(rpl22_oe_res)
View(rpl22l1_oe_res)
View(rpl22l1_kd1_res)
View(rpl22l1_kd2_res)
View(rpl22_a_ko1_res)
View(rpl22_a_ko2_res)
View(rpl22_b_ko1_res)
View(rpl22_b_ko2_res)
dir.name <- system.file("extdata", package = "PathwaySplice")
hallmark.local.pathways <- file.path(dir.name, "h.all.v6.0.symbols.gmt.txt")
hlp <- gmtGene2Cat(hallmark.local.pathways, genomeID = "hg19")
dir.name <- system.file("extdata", package = "PathwaySplice")
hallmark.local.pathways <- file.path(dir.name, "h.all.v6.0.symbols.gmt.txt")
hlp <- gmtGene2Cat(hallmark.local.pathways, genomeID = "hg19")
source('~/Desktop/github/MDM4-splicing/notebooks/r-p3_pathway-splice.R', echo=TRUE)
run_splice <- function(gene_table){
res <- runPathwaySplice(gene_table,
genome='hg19',
id='ensGene',
gene2cat = hlp,
# test.cats=c("GO:CC", "GO:BP", "GO:MF"),
go.size.limit=c(10,500),
method='Wallenius',
use.genes.without.cat = TRUE)
return(res)
}
rpl22_oe_res <- run_splice(rpl22_oe_reduced)
rpl22l1_oe_res <- run_splice(rpl22l1_oe_reduced)
rpl22l1_kd1_res <- run_splice(rpl22l1_kd1_reduced)
rpl22l1_kd2_res <- run_splice(rpl22l1_kd2_reduced)
rpl22_a_ko1_res <- run_splice(rpl22_a_ko1_reduced)
rpl22_a_ko2_res <- run_splice(rpl22_a_ko2_reduced)
rpl22_b_ko1_res <- run_splice(rpl22_b_ko1_reduced)
rpl22_b_ko2_res <- run_splice(rpl22_b_ko2_reduced)
View(rpl22_oe_res)
View(rpl22l1_oe_res)
View(rpl22l1_kd1_res)
View(rpl22l1_kd2_res)
View(rpl22_a_ko1_res)
View(rpl22_a_ko2_res)
View(rpl22_a_ko1_res)
View(rpl22_b_ko1_res)
View(rpl22_b_ko2_res)
enrichmentMap(pathway.res = rpl22_oe_res,
n = 7,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enrichmentMap(pathway.res = rpl22l1_oe_res,
n = 7,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22l1_oe_res,
n = 7,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22l1_kd1_res,
n = 7,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22l1_kd2_res,
n = 7,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22_a_ko1_res,
n = 7,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22_a_ko1_res,
n = 1,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22_a_ko1_res,
n = 1,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22_a_ko1_res,
n = 2,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22_oe_res,
n = 2,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
enmap <- enrichmentMap(pathway.res = rpl22l1_oe_res,
n = 2,
output.file.dir = tempdir(),
similarity.threshold = 0.5,
scaling.factor = 2)
View(rpl22l1_oe_res)
View(rpl22_a_ko1_res)
View(rpl22_a_ko2_res)
View(rpl22_b_ko2_res)
View(rpl22l1_kd2_res)
View(rpl22l1_oe_res)
View(rpl22_oe_res)
